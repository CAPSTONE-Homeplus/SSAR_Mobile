import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:home_clean/data/datasource/auth_local_datasource.dart';
import 'package:signalr_netcore/http_connection_options.dart';
import 'package:signalr_netcore/hub_connection.dart';
import 'package:signalr_netcore/hub_connection_builder.dart';
import 'package:uuid/uuid.dart';

import '../models/notification/notification_model.dart';
import 'notification_local_data_source.dart';

class NotificationRemoteDataSource {
  late HubConnection hubConnection;
  final AuthLocalDataSource authLocalDataSource;
  final NotificationLocalDataSource localDataSource;
  final StreamController<NotificationModel> _notificationController = StreamController<NotificationModel>.broadcast();

  Stream<NotificationModel> get notificationStream => _notificationController.stream;

  NotificationRemoteDataSource({
    required this.authLocalDataSource,
    required this.localDataSource, // Th√™m v√†o
  });

  Future<bool> hasNetworkConnection() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  Future<void> connectToHub() async {
    hubConnection = HubConnectionBuilder()
        .withUrl(
      'https://vinwallet.onrender.com/vinWalletHub',
      options: HttpConnectionOptions(
        accessTokenFactory: () async => await _getAccessToken(),
      ),
    )
        .withAutomaticReconnect()
        .build();

    hubConnection.on('ReceiveNotificationToAll', _handleNotification);
    hubConnection.on('ReceiveNotificationToUser', _handleNotification);
    hubConnection.on('ReceiveNotificationToGroup', _handleNotification);

    await _startSignalRConnection();
  }
  void _handleNotification(List<Object?>? arguments) {
    if (arguments == null || arguments.isEmpty) {
      print('‚ö†Ô∏è Nh·∫≠n th√¥ng b√°o nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá');
      return;
    }

    try {
      // N·∫øu ch·ªâ c√≥ m·ªôt ph·∫ßn t·ª≠, s·ª≠ d·ª•ng n√≥ l√†m message ch√≠nh
      String message = arguments.first?.toString() ?? 'C√≥ th√¥ng b√°o m·ªõi';

      final notification = NotificationModel(
        id: const Uuid().v4(),
        title: 'Th√¥ng b√°o', // Gi·ªØ title chung ho·∫∑c c√≥ th·ªÉ c·∫≠p nh·∫≠t theo n·ªôi dung
        message: message, // Hi·ªÉn th·ªã n·ªôi dung ch√≠nh c·ªßa th√¥ng b√°o
        timestamp: DateTime.now(),
        isRead: false,
        type: 'custom',
        payload: arguments.length > 1 ? {for (int i = 0; i < arguments.length; i++) 'arg_$i': arguments[i]} : null,
      );

      print('üì¢ Nh·∫≠n th√¥ng b√°o: $message');
      localDataSource.addNotification(notification);

      _notificationController.add(notification);
    } catch (e) {
      print('‚ùå L·ªói khi x·ª≠ l√Ω th√¥ng b√°o: $e');
    }
  }


  Future<void> _startSignalRConnection() async {
    if (hubConnection.state == HubConnectionState.Connected ||
        hubConnection.state == HubConnectionState.Connecting) {
      print('üîÑ SignalR ƒë√£ k·∫øt n·ªëi ho·∫∑c ƒëang k·∫øt n·ªëi, kh√¥ng c·∫ßn k·∫øt n·ªëi l·∫°i.');
      return;
    }

    try {
      await hubConnection.start();
      print('‚úÖ K·∫øt n·ªëi SignalR th√†nh c√¥ng');
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi SignalR: $e');
      await Future.delayed(Duration(seconds: 5));
      await _startSignalRConnection();
    }
  }


  Future<void> disconnectFromHub() async {
    if (hubConnection.state == HubConnectionState.Connected) {
      await hubConnection.stop();
    }
  }

  Future<String> _getAccessToken() async {
    String? currentToken = await authLocalDataSource.getAccessTokenFromStorage();
    return currentToken ?? '';
  }

  Future<List<NotificationModel>> fetchNotifications() async {
    // Gi·∫£ ƒë·ªãnh API g·ªçi ƒë·ªÉ l·∫•y th√¥ng b√°o t·ª´ server
    // Trong m·ªôt ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω thay th·∫ø ƒëi·ªÅu n√†y b·∫±ng m·ªôt l·ªánh g·ªçi API th·ª±c t·∫ø
    await Future.delayed(Duration(seconds: 1)); // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ m·∫°ng
    return []; // Tr·∫£ v·ªÅ danh s√°ch r·ªóng cho v√≠ d·ª• n√†y
  }

  Future<void> markAsRead(String notificationId) async {
    // API call ƒë·ªÉ ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc tr√™n server
    await Future.delayed(Duration(milliseconds: 300));
  }

  Future<void> deleteNotification(String notificationId) async {
    // API call ƒë·ªÉ x√≥a th√¥ng b√°o tr√™n server
    await Future.delayed(Duration(milliseconds: 300));
  }
}
