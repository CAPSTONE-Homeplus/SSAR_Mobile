// Mocks generated by Mockito 5.4.5 from annotations
// in home_clean/test/home_clean/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i5;
import 'package:home_clean/core/base_model.dart' as _i3;
import 'package:home_clean/data/models/authen/login_model.dart' as _i9;
import 'package:home_clean/domain/entities/building/building.dart' as _i13;
import 'package:home_clean/domain/entities/room/room.dart' as _i12;
import 'package:home_clean/domain/entities/user/create_user.dart' as _i10;
import 'package:home_clean/domain/entities/user/user.dart' as _i2;
import 'package:home_clean/domain/repositories/authentication_repository.dart'
    as _i7;
import 'package:home_clean/domain/repositories/building_repository.dart' as _i4;
import 'package:home_clean/domain/repositories/room_repository.dart' as _i6;
import 'package:home_clean/domain/repositories/user_repository.dart' as _i11;
import 'package:home_clean/domain/usecases/auth/login_usecase.dart' as _i18;
import 'package:home_clean/domain/usecases/auth/user_register_usecase.dart'
    as _i17;
import 'package:home_clean/domain/usecases/building/get_buildings_usecase.dart'
    as _i14;
import 'package:home_clean/domain/usecases/failure.dart' as _i15;
import 'package:home_clean/domain/usecases/room/get_rooms_usecase.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseResponse_1<T> extends _i1.SmartFake
    implements _i3.BaseResponse<T> {
  _FakeBaseResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBuildingRepository_2 extends _i1.SmartFake
    implements _i4.BuildingRepository {
  _FakeBuildingRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRoomRepository_4 extends _i1.SmartFake
    implements _i6.RoomRepository {
  _FakeRoomRepository_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i7.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> login(_i9.LoginModel? loginModel) =>
      (super.noSuchMethod(
            Invocation.method(#login, [loginModel]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i2.User> createAccount(_i10.CreateUser? createUser) =>
      (super.noSuchMethod(
            Invocation.method(#createAccount, [createUser]),
            returnValue: _i8.Future<_i2.User>.value(
              _FakeUser_0(
                this,
                Invocation.method(#createAccount, [createUser]),
              ),
            ),
          )
          as _i8.Future<_i2.User>);

  @override
  _i8.Future<void> saveUserFromLocal(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserFromLocal, [user]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i2.User> getUserFromLocal() =>
      (super.noSuchMethod(
            Invocation.method(#getUserFromLocal, []),
            returnValue: _i8.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#getUserFromLocal, [])),
            ),
          )
          as _i8.Future<_i2.User>);

  @override
  _i8.Future<void> clearUserFromLocal() =>
      (super.noSuchMethod(
            Invocation.method(#clearUserFromLocal, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i11.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.User> createAccount(_i10.CreateUser? createUser) =>
      (super.noSuchMethod(
            Invocation.method(#createAccount, [createUser]),
            returnValue: _i8.Future<_i2.User>.value(
              _FakeUser_0(
                this,
                Invocation.method(#createAccount, [createUser]),
              ),
            ),
          )
          as _i8.Future<_i2.User>);
}

/// A class which mocks [RoomRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoomRepository extends _i1.Mock implements _i6.RoomRepository {
  MockRoomRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.BaseResponse<_i12.Room>> getRooms(
    String? search,
    String? orderBy,
    int? page,
    int? size,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRooms, [search, orderBy, page, size]),
            returnValue: _i8.Future<_i3.BaseResponse<_i12.Room>>.value(
              _FakeBaseResponse_1<_i12.Room>(
                this,
                Invocation.method(#getRooms, [search, orderBy, page, size]),
              ),
            ),
          )
          as _i8.Future<_i3.BaseResponse<_i12.Room>>);
}

/// A class which mocks [BuildingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildingRepository extends _i1.Mock
    implements _i4.BuildingRepository {
  MockBuildingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.BaseResponse<_i13.Building>> getBuildings(
    String? search,
    String? orderBy,
    int? page,
    int? size,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getBuildings, [search, orderBy, page, size]),
            returnValue: _i8.Future<_i3.BaseResponse<_i13.Building>>.value(
              _FakeBaseResponse_1<_i13.Building>(
                this,
                Invocation.method(#getBuildings, [search, orderBy, page, size]),
              ),
            ),
          )
          as _i8.Future<_i3.BaseResponse<_i13.Building>>);
}

/// A class which mocks [GetBuildingsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBuildingsUsecase extends _i1.Mock
    implements _i14.GetBuildingsUsecase {
  MockGetBuildingsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.BuildingRepository get buildingRepository =>
      (super.noSuchMethod(
            Invocation.getter(#buildingRepository),
            returnValue: _FakeBuildingRepository_2(
              this,
              Invocation.getter(#buildingRepository),
            ),
          )
          as _i4.BuildingRepository);

  @override
  _i8.Future<_i5.Either<_i15.Failure, _i3.BaseResponse<_i13.Building>>> call(
    _i14.GetBuildingsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i8.Future<
              _i5.Either<_i15.Failure, _i3.BaseResponse<_i13.Building>>
            >.value(
              _FakeEither_3<_i15.Failure, _i3.BaseResponse<_i13.Building>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i8.Future<
            _i5.Either<_i15.Failure, _i3.BaseResponse<_i13.Building>>
          >);
}

/// A class which mocks [GetRoomsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRoomsUseCase extends _i1.Mock implements _i16.GetRoomsUseCase {
  MockGetRoomsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.RoomRepository get roomRepository =>
      (super.noSuchMethod(
            Invocation.getter(#roomRepository),
            returnValue: _FakeRoomRepository_4(
              this,
              Invocation.getter(#roomRepository),
            ),
          )
          as _i6.RoomRepository);

  @override
  _i8.Future<_i5.Either<_i15.Failure, _i3.BaseResponse<_i12.Room>>> call(
    _i16.GetRoomsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i8.Future<
              _i5.Either<_i15.Failure, _i3.BaseResponse<_i12.Room>>
            >.value(
              _FakeEither_3<_i15.Failure, _i3.BaseResponse<_i12.Room>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i8.Future<_i5.Either<_i15.Failure, _i3.BaseResponse<_i12.Room>>>);
}

/// A class which mocks [UserRegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRegisterUseCase extends _i1.Mock
    implements _i17.UserRegisterUseCase {
  MockUserRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.User> call(_i10.CreateUser? createUser) =>
      (super.noSuchMethod(
            Invocation.method(#call, [createUser]),
            returnValue: _i8.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#call, [createUser])),
            ),
          )
          as _i8.Future<_i2.User>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i18.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> call(_i9.LoginModel? loginModel) =>
      (super.noSuchMethod(
            Invocation.method(#call, [loginModel]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);
}
